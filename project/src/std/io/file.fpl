use {
 std.io.base
 std.backend
}
abstract class FileHandler Closeable {
   protected void* handle
   this string name string mode {
      handle = file_open name,mode
      if handle == nil {
        IOException:new "file not found";throw
      }
   }
   override fn void close {
     file_close handle
   }
}
class FileWriter FileHandler Writable {
  this string name;name,"w"
  override fn void write byte* p memory size {
      file_write handle,p,size
  }
}
class FileReader FileHandler  Readable{
  this string name;name,"r"
  override fn void read byte* p memory size{
     file_read handle,p,size
  }
  override fn bool ready {
    return file_eof handle
  }
}
use{
 std.io.base
 std.backend
}
private const{
 [] char 2 READ $r,$\0
 [] char 2 WRITE $w,$\0
 fn int getCStringLen char* str{
   var len 0
   while str get len; != $\0{
    len ++
   }
   return len
 }
}
abstract class FileHandler Closeable{
   protected{
     const void* handle
     fn void checkError{
          var num fileError handle
          if num == -1{
            var msg getErrorMessage num
            IOException:new String:new msg,getCStringLen msg;,false;;throw
          }
        }
   }
   this String name char* mode{
      var cname name toCString
      handle = fileOpen cname,mode
      cname free
      if handle == nil{
        var msg getErrNoMessage
        IOException:new String:new msg,getCStringLen msg;,false; + " "; + name;;throw
      }
   }
   this void* handle{
     this handle = handle
   }
   override fn void close{
     fileClose handle
     checkError
   }
}
class FileWriter FileHandler Writable{
  this String name:name,WRITE
  this void* handle:handle
  override fn void write byte* p memory size = fileWrite handle,p,size
}
class FileReader FileHandler Readable{
  this String name:name,READ
  this void* handle:handle
  override fn void read byte* p memory size = fileRead handle,p,size
  override fn bool ready = fileEOF handle; !
}
class DirectoryStream{
  private{
    void* handle
    DirectoryEntry* last
  }
  this String name{
    var cstr name toCString
    handle = directoryOpen cstr
    cstr free
    if handle == nil{
      var msg getErrNoMessage
      IOException:new String:new msg,getCStringLen msg;,false; + " "; + name;;throw
    }
    last = nil
  }
  fn String read{
    var entry last
    last = nil
    if entry == nil{
      entry = directoryRead handle
      if entry == nil{
        IOException:new "no more files";throw
      }
    }
    return String:new entry name,entry nameLength,false
  }
  fn bool ready{
    last = directoryRead handle
    return last != nil
  }
  fn long tell = directoryTell handle
  fn void seek long loc = directorySeek handle,loc
  fn void reset = directoryReset handle
  fn void close = directoryClose handle
}
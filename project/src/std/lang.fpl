(#this module is imported automatically)
use std.backend

fn void print char c = putchar c cast int
class String{
  private{
    char* p
    uint len
    bool allocated
    fn void checkIndex uint len uint index{
       if index >= len{
           Exception:throw "index out of bounds:" + integerToString index
        }
     }
  }
  this char* p uint len bool allocated{
    this len = len
    this p = p
    this allocated = allocated
  }
  -this{
    if allocated{
       p free
    }
  }
  fn void set uint index char c{
    checkIndex len,index
    p set index,c
  }
  fn char get uint index{
    checkIndex len,index
    return p get index
  }
  fn bool == String str{
    if len != str len{
      return false
    }
    for i,len{
      if p get i; != str p get i{
        return false
      }
    }
    return true
  }
  fn String + String str{
    var ret char:alloc[] len + str len
    var i 0
    while i < len{
       ret set i,p get i
       i ++
    }
    for strI,str len{
      ret set i,str p get strI
      i ++
    }
    return String:new ret,len + str len,true
  }
  fn char* toCString{
    var ret char:alloc[] len + 1
    var i 0
    while i < len{
      ret set i,p get i
      i ++
    }
    ret set i,$\0
    return ret
  }
  =this{
    len = o len
    p = char:alloc[] len
    memoryCopy o p,p,len
    allocated = true
  }
  fn void = String str{
    len = str len
    p = char:alloc[] len
    memoryCopy str p,p,len
    allocated = true
    if allocated && p == nil{
      p free
    }
  }
   fn bool isBlank{
      for i,len{
        if isWhitespace p get i;!{
          return false
        }
      }
      return true
  }
  fn String toUpperCase{
    var p char:alloc[] len
    String str init p,len,true
    for i,len{
      str set i,std.lang.toUpperCase get i
    }
    return str
  }
  fn String toLowerCase{
      var p char:alloc[] len
      String str init p,len,true
      for i,len{
        str set i,std.lang.toLowerCase get i
      }
      return str
  }
  fn String replace char original char replacement{
    var p char:alloc[] len
    String str init p,len,true
    for i,len{
      var c get i
      if c == original{
        c = replacement
      }
      str set i,c
    }
    return str
  }
  fn bool contains char c{
    for i,len{
      if get i; == c{
        return true
      }
    }
    return false
  }
  fn bool contains String str{
     if len < str len{
       return false
     }
     for i,len{
       var match true
       for j,str len{
         if get i; != str get j{
           match = false
           break
         }
         if match{
           return true
         }
         i ++
       }
     }
     return false
  }
  fn bool startsWith String str{
    if str len > len{
      return false
    }
    for i,str len{
      if str get i; != p get i{
        return false
      }
    }
    return true
  }
  fn bool endsWith String str{
    if str len > len{
     return false
    }
    var j len - str len
    for i,str len{
     if str get i; != p get j{
        return false
     }
     j ++
    }
    return true
  }
  fn bool startsWith char c = len != 0; && [ p get 0; == c ]
  fn bool endsWith char c = len != 0; && [ p get len - 1; == c ]
  fn String substring uint beginIndex uint endIndex{
    if endIndex < beginIndex{
      IllegalArgumentException:throw "endIndex must be bigger than beginIndex"
    }
    if endIndex > len{
      IllegalArgumentException:throw "endIndex cannot be bigger than length of string"
    }
    var i beginIndex
    var len endIndex - beginIndex
    String result init char:alloc[] len,len,true
    var resultIndex 0
    while i < len; && i < endIndex{
      result set resultIndex,p get i
      i ++
      resultIndex ++
    }
    return result
  }
  fn String strip{
    var beginIndex 0
    var endIndex 0
    var afterBegin false
    for i,len{
      var c p get i
      if afterBegin ! && beginIndex == 0; && isWhitespace c;!{
        if i > 0{
          beginIndex = i - 1
        }
        afterBegin = true
      }
      if afterBegin && endIndex == 0; && isWhitespace c{
        endIndex = i
      }
    }
    return [ beginIndex == 0; && endIndex  == 0 ] ? this drf,substring beginIndex,endIndex
  }
  fn bool isAllocated = allocated
  fn String substring uint endIndex = substring 0,endIndex
  fn bool equalsIgnoreCase String str = toLowerCase; == str toLowerCase
  fn uint getLength = len
  fn String toString = this drf
  fn bool isEmpty = len == 0
  fn bool isEmptyOrBlank = isEmpty; || isBlank
  fn char* getData = p
}
fn void print String str{
   var cstr str toCString
   puts cstr
   cstr free
}
struct EHEntry{
   EHEntry* prev
   Context context
   void** exceptionTypes
   int exceptionTypesLen
}
class Exception{
   protected String message
   this String message{
     this message = message
   }
   virtual fn String getMessage = message
   fn void throw{
     var target currentThread currentEHEntry
     var stop false
     while target != nil{
      var i 0
      while i < target exceptionTypesLen{
      if target exceptionTypes get i; == getClass{
           stop = true
           break
      }
      i ++
     }
     if stop{
       break
     }
     target = target prev
     }
     if target == nil{
       currentThread exceptionHandler drf this
       return
     }
     currentThread exception = std.backend.malloc getObjectSize;cast Exception*
     if currentThread exception == nil{
        print "unable to allocate exception"
        exit 1
     }
     memoryCopy this cast byte*,currentThread exception cast byte*,getObjectSize
     contextRestore target context
   }
   #DO NOT REMOVE used in try-catch-finally
   internal fn void copyAndFree Exception* target{
       memoryCopy this cast byte*,target cast byte*,getObjectSize
       target message = message
       this free
   }
}
fpointer void ExceptionHandlerType Exception* ex
class Thread{
 private String name
 internal{
   Exception* exception
   EHEntry* currentEHEntry
   ExceptionHandlerType exceptionHandler
   fn void addEHEntry void** exceptionTypes int exceptionTypesLen{
        var prev currentEHEntry
        currentEHEntry = EHEntry:alloc
        currentEHEntry prev = prev
        currentEHEntry exceptionTypes = exceptionTypes
        currentEHEntry exceptionTypesLen = exceptionTypesLen
    }
    fn void removeEHEntry{ #exceptionTypes is not dynamically allocated
      var prev currentEHEntry prev
      currentEHEntry free
      currentEHEntry = prev
    }
     fn void freeEHEntries{
       while currentEHEntry != nil{
         var prev currentEHEntry prev
         currentEHEntry free
         currentEHEntry = prev
       }
     }
 }
 this String name{
   this name = name
   currentEHEntry = nil
   setExceptionHandler &defaultExceptionHandler
 }
 fn void setName String name = this name = name
 fn String getName = name
 fn void setExceptionHandler ExceptionHandlerType exceptionHandler = this exceptionHandler = exceptionHandler
}
Thread* currentThread #initailized in main block
fn void defaultExceptionHandler Exception* ex{
  print "exception happened:"
  print ex getMessage
  exit 1
}
fn void* realloc void* p memory newSize{
  p = std.backend.realloc p,newSize
  if p == nil{
    Exception:throw "reallocation of memory failed"
  }
  return p
}
fn void* malloc memory size{
  var p std.backend.malloc size
  if p == nil{
    Exception:throw "allocation of memory failed"
  }
  return p
}
fn void memoryCopy byte* src byte* dest memory size{
    for i,size{
     dest set i,src get i
    }
}
#these functions will be made inaccessible by compiler
#char methods
fn bool isDigit char this{
  var c this cast int
  return c >= 48; && c <= 57
}
fn bool isWhitespace char this{
  var c this cast int
  return c <= 32; || c == 127
}
fn bool isControl char this{
  var c this cast int
  return c <= 31; || c == 127
}
fn bool isLetter char this{
  var c this cast int
  return c >= 65; &&  c <= 132; || c >= 97; && c <= 122
}
fn bool isLowerCase char this{
  var c this  cast int
  return c <= 122; || c >= 97
}
fn bool isUpperCase char this{
  var c this cast int
  return c <= 90; || c >= 65
}
fn bool isBlank char this = this == $\s ; || this == $\t
fn bool isHexDigit char this{
  var c this cast int
  return isDigit this; || c >= 65; && c <= 70; || c >= 97; && c <= 102
}
fn bool isPrint char this{
  var c this cast int
  return c <= 176; || c >= 32
}
fn bool isGraph char this = isPrint this; || this == $\s
fn bool isPunct char this = isGraph this; && isLetter this
fn char toLowerCase char this{
  if isUpperCase this{
     return $a cast byte + this cast byte  - $A
  }
  return this
}
fn char toUpperCase char this{
 if isLowerCase this{
   return $A cast byte + this cast byte - $a
 }
 return this
}
fn String charToString char this{
  String str init char:alloc[] 1,1,true
  str set 0,this
  return str
}
private const var TRUE "true";FALSE "false"
fn String boolToString bool this{
   return this ? TRUE,FALSE
}
fn String integerToString long this{
 [] char 20 buf
 int i 0
 var negative false
 if this < 0{
   this = this -
   negative = true
 }
 while this > 0;|| i == 0{
  buf set i,[ this % 10 + $0 cast byte ] cast char
  this /= 10
  i ++
 }
 var j 0
 var len i --
 if negative{
   j = 1
   len ++
 }
 var ret char:alloc[] i
 if negative{
   ret set 0,$-
 }
 while j < len{
   ret set j,buf get i
   j ++
   i --
 }
 return String:new ret,len,true
}
fn long integerParse String str{
  if str isEmpty{
    NumberFormatException:throw "invalid number " + str
  }
  long value 0
  var sign 1
  for i,str getLength{
     var c str get i
     if c == $+{
       #ignore
     }if c == $-{
       sign = -1
     }if isDigit c{
       value = value * 10 + c cast long - $0 cast long
     }{
       NumberFormatException:throw "invalid number " + str
     }
  }
  return sign * value
}
fn String floatingPointToString double this int precision{
   if isNaN this{
     return STRING_NAN
   }
   if this == DOUBLE_POSITIVE_INFINITY{
     return STRING_POSITIVE_INFINITY
   }
   if this == DOUBLE_NEGATIVE_INFINITY{
     return STRING_NEGATIVE_INFINITY
   }
   var sign ""
   if this < 0{
     this = this -
     sign = "-"
   }
   var iPart this cast long
   var fPart this - iPart cast double
   for i,precision{
     fPart *= 10
   }
   return sign + integerToString iPart; + "." + integerToString fPart cast long
}
class NumberFormatException Exception{
   this String message:message
}
class IllegalArgumentException Exception{
  this String message:message
}
fn double floatingPointParse String str{
    if str isEmpty{
      NumberFormatException:throw "invalid number " + str
    }
    double value 0
    var sign 1
    var afterFPoint false
    for i,str getLength{
       var c str get i
       if c == $+{
         #ignore
       }if c == $-{
         sign = -1
       }if c == $.{
        if afterFPoint{
          NumberFormatException:throw "invalid number " + str
        }
        afterFPoint = true
       }if isDigit c{
         var num c cast double - $0 cast double
         if afterFPoint{
          value = value / 10 + num
         }{
           value = value * 10 + num
         }
       }{
         NumberFormatException:throw "invalid number " + str
       }
    }
    return sign * value
}
fn bool isNaN double d{
  for i,double:getInstanceSize{
     if d ref cast char* get i; != DOUBLE_NAN ref cast char* get i{
       return false
     }
  }
  return true
}
#these constants will be removed by the compiler
const{
  byte BYTE_MIN_VALUE -128;BYTE_MAX_VALUE 127
  sbyte SBYTE_MIN_VALUE -128;SBYTE_MAX_VALUE 127
  ubyte UBYTE_MIN_VALUE 0;UBYTE_MAX_VALUE 255
  short SHORT_MIN_VALUE -32768;SHORT_MAX_VALUE 32767
  sshort SSHORT_MIN_VALUE -3268;SSHORT_MAX_VALUE 32767
  ushort USHORT_MIN_VALUE 0;USHORT_MAX_VALUE 65535
  int INT_MIN_VALUE -2147483648;INT_MAX_VALUE  2147483647
  sint SINT_MIN_VALUE -2147483648;SINT_MAX_VALUE 2147483647
  uint UINT_MIN_VALUE 0;UINT_MAX_VALUE 4_294_967_295
  long LONG_MIN_VALUE -2147483646L;LONG_MAX_VALUE 2147483647L
  slong SLONG_MIN_VALUE -2147483646L;SLONG_MAX_VALUE 2147483647L
  ulong ULONG_MIN_VALUE 0;ULONG_MAX_VALUE 0xffffffffUL
  float FLOAT_MIN_VALUE 1.4e-45;FLOAT_MAX_VALUE 3.4028235e38F;FLOAT_NAN 0F / 0F;FLOAT_POSITIVE_INFINITY 1F / 0F;FLOAT_NEGATIVE_INFINITY -1F / 0F
  double DOUBLE_MIN_VALUE 4.9e-324;DOUBLE_MAX_VALUE 1.7976931348623157e308;DOUBLE_NAN 0D / 0D;DOUBLE_POSITIVE_INFINITY 1D / 0D;DOUBLE_NEGATIVE_INFINITY -1D / 0D
  var STRING_NAN "NaN";STRING_POSITIVE_INFINITY "infinity";STRING_NEGATIVE_INFINITY "-infinity"
}
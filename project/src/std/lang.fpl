(#this module is imported automatically)
use std.backend

class Exception {
   private string message
   this string message {
     this message = message
   }
   virtual fn string getMessage {
     return message
   }
   fn void throw {
     currentThread exception = malloc getObjectSize
     memory i 0L
     while i < getObjectSize {
       currentThread exception cast byte* set i,this cast byte* get i
       i ++
     }
    currentThread throwTarget drf
   }
}
fpointer void throwTargetType
class Thread {
 private string name
 internal {
   Exception* exception
   throwTargetType throwTarget
 }
 fn void setName string name {
   this name = name
 }
 fn string getName {
   return name
 }
}
Thread* currentThread
#these functions will be made inaccessible by compiler
fn void defaultExceptionHandler {
  file_setBuffer stdout,nil,IO_NO_BUFFER,0L
  puts "exception happened:"
  puts currentThread exception getMessage
  free currentThread exception cast void*
  exit 1
}
#string methods
fn uint getLength string* this {
  var length 0
  while this drf get length; != $\0 {
      length ++
  }
  return length
}
fn bool equals string* this string str {
   var len getLength this
   if len != getLength str ref {
      return false
   }
   var i 0
   while i < len {
      if this drf get i; != $\0 {
         return false
      }
   }
   return true
}
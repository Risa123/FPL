(#this module is imported automatically)
use std.backend

class Exception{
   private string message
   this string message{
     this message = message
   }
   virtual fn string getMessage{
     return message
   }
   fn void throw{
     currentThread exception = malloc getObjectSize
     memory i 0L
     while i < getObjectSize{
       currentThread exception cast byte* set i,this cast byte* get i
       i ++
     }
     contextRestore currentThread currentEHentry context
   }
}
fpointer void throwTargetType
private class EHentry{
  EHentry* prev
  throwTargetType target
  ContextData context
}
class Thread{
 private{
   string name
   EHentry* first
 }
 internal{
   Exception* exception
   EHentry* currentEHentry
 }
 this string name{
   this name = name
   first = EHentry:alloc
   setExceptionHandler &defaultExceptionHandler
   currentEHentry = first
 }
 fn void setName string name{
   this name = name
 }
 fn string getName{
   return name
 }
 fn void setExceptionHandler throwTargetType exceptionHandler{
    first target = exceptionHandler
 }
}
Thread* currentThread
fn void defaultExceptionHandler{
  puts "exception happened:"
  puts currentThread exception getMessage
  free currentThread exception cast void*
  exit 1
}
#these functions will be made inaccessible by compiler
#string methods
fn uint getLength string* this{
  var length 0
  while this drf get length; != $\0{
      length ++
  }
  return length
}
fn bool equals string* this string str{
   var len getLength this
   if len != getLength str ref{
      return false
   }
   var i 0
   while i < len {
      if this drf get i; != $\0{
         return false
      }
   }
   return true
}
#char methods
fn bool isDigit char* this{
  var c this drf cast int
  return c >= 48; && c <= 57
}
fn bool isWhitespace char* this{
  var c this drf cast int
  return c <= 32; || c == 127
}
fn bool isControl char* this{
  var c this drf cast int
  return c <= 31; || c == 127
}
fn bool isLetter char* this{
  var c this drf cast int
  return c >= 65; &&  c <= 132; || c >= 97; && c <= 122
}
fn bool isLower char* this{
  var c this drf cast int
  return c <= 122; || c >= 97
}
fn bool isUpper char* this{
  var c this drf cast int
  return c <= 90; || c >= 65
}
fn bool isBlank char* this{
  return this drf == $sp ; || this drf == $\t
}
fn bool isHexDigit char* this{
  var c this drf cast int
  return isDigit this; || c >= 65; && c <= 70; || c >= 97; && c <= 102
}
fn bool isPrint char* this{
  var c this drf cast int
  return c <= 176; || c >= 32
}
fn bool isGraph char* this{
  return isPrint this; || this drf == $sp
}
fn bool isPunct char* this{
  return isGraph this; && isLetter this
}
fn char toLower char* this{
  if isUpper this{
     return $a cast int + this drf cast int  - $A
  }
  return this drf
}
fn char toUpper char* this{
 if isLower this{
   return $A cast int + this drf cast int  - $a
 }
 return this drf
}
#bool toString
fn string toString bool* this{
   if this drf{
     return "true"
   }
   return "false"
}
(#this module is imported automatically)
use std.backend

class String{
  private{
    char* p
    uint len
    bool allocated
  }
  this char* p uint len bool allocated{
    this len = len
    this p = p
    this allocated = allocated
  }
  this{}
  -this{
    if allocated{
       p free
    }
  }
  fn void set uint index char c{
    p set index,c
  }
  fn char get uint index{
    return p get index
  }
  fn bool == String str{
    if len != str len{
      return false
    }
    var i 0
    while i < len{
      if p get i; != str p get i{
        return false
      }
      i ++
    }
    return true
  }
  fn String + String str{
    var ret char:alloc[] len + 1
    var i 0
    while i < len{
       ret set i,p get i
       i ++
    }
    var strI 0
    while strI < str len{
      ret set i,str p get strI
      strI ++
      i ++
    }
    return String:new ret,len,true
  }
  fn char* toCString{
    var ret char:alloc[] len + 1
    var i 0
    while i < len{
      ret set i,this p get i
      i ++
    }
    ret set i,$\0
    return ret
  }
  fn void assign String str{
    len = str len
    p = str p
    allocated = str allocated
  }
  fn uint getLength = len
  fn String toString = this drf
}
fn void print String str{
   var cstr str toCString
   puts cstr
   cstr free
}
class Exception{
   private String message
   this String message{
     this message = message
   }
   virtual fn String getMessage = message
   fn void throw{
     if currentThread currentEHentry == nil{
       currentThread exceptionHandler drf this
       return
     }
     native fn void* malloc memory size
     currentThread exception = malloc getObjectSize;cast Exception*
     if currentThread exception == nil{
        print "unable to allocate exception"
        exit 1
     }
     memoryCopy this cast byte*,currentThread exception cast byte*,getObjectSize
     contextRestore currentThread currentEHentry context
   }
   internal fn void copyAndFree Exception* to{
     memoryCopy this cast byte*,to cast byte*,getObjectSize
     this free
   }
}
fpointer void ExceptionHandlerType Exception* ex
private class EHentry{
  EHentry* prev
  Context context
}
fn void checkStringIndex uint len uint index{
    if index >= len{
       Exception ex  "index out of bounds:" + integerToString index
       ex throw
    }
 }
class Thread{
 private String name
 internal{
   Exception* exception
   EHentry* currentEHentry
   ExceptionHandlerType exceptionHandler
   fn void addEHentry{
        var prev currentEHentry
        currentEHentry = EHentry:alloc
        currentEHentry prev = prev
    }
    fn void removeEHentry{
      var prev currentEHentry prev
      currentEHentry free
      currentEHentry = prev
    }
 }
 (#do not call)
 fn void freeEHentries{
   while currentEHentry != nil{
     var prev currentEHentry prev
     currentEHentry free
     currentEHentry = prev
   }
 }
 this String name{
   this name = name
   currentEHentry = nil
   setExceptionHandler &defaultExceptionHandler
 }
 fn void setName String name = this name = name
 fn String getName = name
 fn void setExceptionHandler ExceptionHandlerType exceptionHandler{
   this exceptionHandler = exceptionHandler
 }
}
Thread* currentThread
fn void defaultExceptionHandler Exception* ex{
  print "exception happened:"
  print ex getMessage
  ex free
  exit 1
}
fn void* realloc void* p memory newSize{
  p = realloc p,newSize
  if p == nil{
    Exception ex "reallocation of memory failed"
    ex throw
  }
  return p
}
fn void* malloc memory size{
  var p malloc size
  if p == nil{
    Exception ex "allocation of memory failed"
    ex throw
  }
  return p
}
fn void memoryCopy byte* src byte* dest memory size{
    memory i 0L
    while i < size{
     dest set i,src get i
     i ++
    }
}
alias free free
#these functions will be made inaccessible by compiler
#char methods
fn bool isDigit char this{
  var c this cast int
  return c >= 48; && c <= 57
}
fn bool isWhitespace char this{
  var c this cast int
  return c <= 32; || c == 127
}
fn bool isControl char this{
  var c this cast int
  return c <= 31; || c == 127
}
fn bool isLetter char this{
  var c this cast int
  return c >= 65; &&  c <= 132; || c >= 97; && c <= 122
}
fn bool isLower char this{
  var c this  cast int
  return c <= 122; || c >= 97
}
fn bool isUpper char this{
  var c this cast int
  return c <= 90; || c >= 65
}
fn bool isBlank char this{
  return this == $\s ; || this == $\t
}
fn bool isHexDigit char this{
  var c this cast int
  return isDigit this; || c >= 65; && c <= 70; || c >= 97; && c <= 102
}
fn bool isPrint char this{
  var c this cast int
  return c <= 176; || c >= 32
}
fn bool isGraph char this = isPrint this; || this == $\s
fn bool isPunct char this = isGraph this; && isLetter this
fn char toLower char this{
  if isUpper this{
     return $a cast int + this cast int  - $A
  }
  return this
}
fn char toUpper char this{
 if isLower this{
   return $A cast int + this cast int  - $a
 }
 return this
}
fn String charToString char this{
  var b char:alloc[] 1
  String str b,1,true
  str set 0,this
  return str
}
#bool methods
fn String boolToString bool this{
   if this{
     return "true"
   }
   return "false"
}
#integer methods
fn String integerToString long this{
 [] char 20 buf
 int i 0
 while this > 0;|| i == 0{
  buf set i,this % 10 + $0
  this /= 10
  i ++
 }
 String ret buf,20,true
 return ret
}
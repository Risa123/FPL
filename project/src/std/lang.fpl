(#this module is imported automatically)
use std.backend

class Exception{
   private{
     string message
     fn void copy Exception* to{
       memory i 0L
       while i < getObjectSize{
          to cast byte* set i,this cast byte* get i
          i ++
       }
     }
   }
   this string message{
     this message = message
   }
   virtual fn string getMessage = message
   fn void throw{
     if currentThread currentEHentry == nil{
       currentThread exceptionHandler drf this
       return
     }
     currentThread exception = malloc getObjectSize; cast Exception*
     copy currentThread exception
     contextRestore currentThread currentEHentry context
   }
   internal fn void copyAndFree Exception* to{
     copy to
     free this cast void*
   }
}
fpointer void ExceptionHandlerType Exception* ex
private class EHentry{
  EHentry* prev
  Context context
}
class Thread{
 private string name
 internal{
   Exception* exception
   EHentry* currentEHentry
   ExceptionHandlerType exceptionHandler
   fn void addEHentry{
        var prev currentEHentry
        currentEHentry = EHentry:alloc
        currentEHentry prev = prev
    }
    fn void removeEHentry{
      var prev currentEHentry prev
      free currentEHentry cast void*
      currentEHentry = prev
    }
 }
 (#do not call)
 fn void freeEHentries{
   while currentEHentry != nil{
     var prev currentEHentry prev
     free currentEHentry cast void*
     currentEHentry = prev
   }
 }
 this string name{
   this name = name
   currentEHentry = nil
   setExceptionHandler &defaultExceptionHandler
 }
 fn void setName string name = this name = name
 fn string getName = name
 fn void setExceptionHandler ExceptionHandlerType exceptionHandler{
   this exceptionHandler = exceptionHandler
 }
}
Thread* currentThread
fn void defaultExceptionHandler Exception* ex{
  puts "exception happened:"
  puts ex getMessage
  exit 1
}
fn void* realloc void* p memory newSize{
  p = realloc p,newSize
  if p == nil{
    Exception ex "reallocation of memory failed"
    ex throw
  }
  return p
}
fn void* malloc memory size{
  var p malloc size
  if p == nil{
    Exception ex "allocation of memory failed"
    ex throw
  }
  return p
}
alias free free
class ArrayList;T{
 private{
  T* array
  memory len
 }
 this{
   array = nil
   len = 0
 }
 fn T get memory index{
   if index >= len{
     Exception ex "index out of bounds"
     ex throw
   }
   return array get index
 }
 fn void set memory index T value{
   if index >= len{
      Exception ex "index out of bounds"
      ex throw
   }
   array set index,value
 }
 fn void add T value{
   len ++
   if array == nil{
      array = malloc value getObjectSize;cast T*
   }{
    array = realloc array cast void*,len * value getObjectSize; cast T*
   }
}
#these functions will be made inaccessible by compiler
#string methods
fn uint getLength string* this{
  var length 0
  while this drf get length; != $\0{
      length ++
  }
  return length
}
fn bool equals string* this string str{
   var len getLength this
   if len != getLength str ref{
      return false
   }
   var i 0
   while i < len {
      if this drf get i; != $\0{
         return false
      }
   }
   return true
}
#char methods
fn bool isDigit char* this{
  var c this drf cast int
  return c >= 48; && c <= 57
}
fn bool isWhitespace char* this{
  var c this drf cast int
  return c <= 32; || c == 127
}
fn bool isControl char* this{
  var c this drf cast int
  return c <= 31; || c == 127
}
fn bool isLetter char* this{
  var c this drf cast int
  return c >= 65; &&  c <= 132; || c >= 97; && c <= 122
}
fn bool isLower char* this{
  var c this drf cast int
  return c <= 122; || c >= 97
}
fn bool isUpper char* this{
  var c this drf cast int
  return c <= 90; || c >= 65
}
fn bool isBlank char* this{
  return this drf == $sp ; || this drf == $\t
}
fn bool isHexDigit char* this{
  var c this drf cast int
  return isDigit this; || c >= 65; && c <= 70; || c >= 97; && c <= 102
}
fn bool isPrint char* this{
  var c this drf cast int
  return c <= 176; || c >= 32
}
fn bool isGraph char* this = isPrint this; || this drf == $sp
fn bool isPunct char* this = isGraph this; && isLetter this
fn char toLower char* this{
  if isUpper this{
     return $a cast int + this drf cast int  - $A
  }
  return this drf
}
fn char toUpper char* this{
 if isLower this{
   return $A cast int + this drf cast int  - $a
 }
 return this drf
}
#string methods
fn string toString bool* this{
   if this drf{
     return "true"
   }
   return "false"
}
use std.backend std.io.base std.io.file std.collection

fn void exit int exitCode{
 callOnExitHandlers
 std.backend.exit exitCode
}
fn void callOnExitHandlers{#made inaccessible
  for i,onExitHandlers getSize{
      onExitHandlers get i;drf
   }
}
fn int execute String cmd{
  var CCmd cmd toCString
  var exitCode std.backend.execute CCmd
  CCmd free
  if exitCode == -1{
    IOException:new "invalid command " + cmd;;throw
  }
  return exitCode
}
fn void addOnExitHandler onExit handler{
 onExitHandlers add handler
}
fn String getEnv String name{
  var cstr name toCString
  var value std.backend.getEnv cstr
  if value == nil{
    IOException:new "environment variable " + name; + " not found";;throw
  }
  cstr free
  return String:new value,getCStringLen value;,true
}
fpointer void onExit
const{
 DataWriter stderr init fileStderr
 DataWriter stdout init fileStdout
 DataReader stdin init fileStdin
 private{
  FileWriter fileStderr init stderr
  FileWriter fileStdout init stdout
  FileReader fileStdin init stdin
  ArrayList;onExit;onExitHandlers init
 }
}
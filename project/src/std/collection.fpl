
class ArrayList;T{
 private{
  T* array nil
  memory len 0
  fn void checkIndex memory index{
    if index >= len{
      NoElementException:throw "index out of bounds:" + index toString
    }
  }
 }
 fn T get memory index{
   checkIndex index
   return array get index
 }
 fn void set memory index T value{
   checkIndex index
   array set index,value
 }
 fn void add T value{
   len ++
   if array == nil{
      array = malloc T:getInstanceSize;cast T*
      array drf= value
   }{
     array = realloc array cast void*,len * T:getInstanceSize;cast T*
     array set len - 1,value
   }
 }
 fn void clear{
  if array != nil{
    len = 0
    array free[] len
    array = nil
  }
 }
 fn bool isEmpty = len == 0
 fn memory getSize = len
 fn T* getArray = array
 -this{
   if array != nil{
     array free[] len
   }
 }
 =this{
   if o array != nil{
     len = o len
     array = malloc [ T:getInstanceSize * len ];cast T*
     for i,len{
       array set i,o array get i
     }
   }
 }
}
final class Entry;K V{
  K key
  V value
  this K key V value{
    this key = key
    this value = value
  }
}
class Map;K V{
  private const ArrayList;Entry;K V;; entries init
  fn void put K key V value{
    for i,entries getSize{
      var entry entries get i
      if entry key == key{
        entry value = value
        return
      }
    }
    entries add Entry;K V:new key,value
  }
  fn bool containsKey K key{
    for i,entries getSize{
      if entries get i;key == key{
        return true
      }
    }
    return false
  }
  fn V get K key{
    for i,entries getSize{
      var entry entries get i
      if entry key == key{
        return entry value
      }
    }
    NoElementException:throw "map has no entry for key"
  }
  fn void clear = entries clear
  fn memory getSize = entries getSize
  fn bool isEmpty = entries getSize; == 0
}
class NoElementException Exception{
  this String message:super message
}
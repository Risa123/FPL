
class ArrayList;T{
 private{
  T* array nil
  memory len 0
  fn void checkIndex memory index{
    if index >= len{
      NoElementException:throw "index out of bounds:" + index toString
    }
  }
 }
 fn T get memory index{
   checkIndex index
   return array get index
 }
 fn void set memory index T value{
   checkIndex index
   array set index,value
 }
 fn void add T value{
   len ++
   if array == nil{
      array = malloc T:getInstanceSize;cast T*
      array drf= value
   }{
    array = realloc array cast void*,len * T:getInstanceSize;cast T*
    memoryCopy value ref cast byte*,array cast byte* + T:getInstanceSize * [ len - 1 ],T:getInstanceSize
   }
 }
 fn void clear{
  len = 0
  if array != nil{
    array free[] len
    array = nil
  }
 }
 fn bool isEmpty = len == 0
 fn memory getSize = len
 fn T* getArray = array
 -this{
   if array != nil{
     array free[] len
   }
 }
 =this{
   if o array != nil{
     len = o len
     array = malloc T:getInstanceSize;cast T*
     memoryCopy o array cast byte*,array cast byte*,T:getInstanceSize * len
   }
 }
}
final class Entry;K V{
  private{
   K key
   V value
  }
  this K key V value{
    this key = key
    this value = value
  }
  fn K getKey = key
  fn V getValue = value
  fn void setKey K key = this key = key
  fn void setValue V value = this value = value
}
class Map;K V{
  private const ArrayList;Entry;K V;; entries init
  fn void put K key V value{
    for i,entries getSize{
      var entry entries get i
      if entry getKey; == key{
        entry setValue value
        return
      }
    }
    entries add Entry;K V:new key,value
  }
  fn bool containsKey K key{
    for i,entries getSize{
      if entries get i;getKey; == key{
        return true
      }
    }
    return false
  }
  fn V get K key{
    for i,entries getSize{
      var entry entries get i
      if entry getKey; == key{
        return entry getValue
      }
    }
    NoElementException:throw "map has no entry for key"
  }
  fn void clear = entries clear
  fn memory getSize = entries getSize
  fn bool isEmpty = entries getSize; == 0
}
class NoElementException Exception{
  this String message:super message
}
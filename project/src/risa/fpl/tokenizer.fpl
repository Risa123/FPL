use{
 std.io.base
 std.collection
 risa.fpl.base
 std.backend
}

class Token{
  private{
   int line;tokenNum
    string value
  }
  this int line int tokenNum string value{
    this line = line
    this tokenNum = tokenNum
    this value = value
  }
  fn int getLine = line
  fn int getTokenNum = tokenNum
  fn string getValue = value
}
class Tokenizer{
 private{
    int line 1;tokenNum 1;i 0
    DataReader* reader
    const ArrayList;Token; tokens
    fn Token token int line int tokenNum string value{
       return Token:new line,tokenNum,value
    }
 }
 this Readable readable{
    this reader = DataReader:alloc readable
 }
 fn Token next{
    var token peek
    i ++
    return token
 }
 fn Token peek{
   if tokens getSize; == i{
     tokens clear
   }
   if tokens isEmpty{
      if reader ready{
       var c reader readChar
       if c == $({
         while reader ready; && reader readChar; == $){}
       }if c == $#{
         while reader ready; && reader readChar; == $\n{}
       }if c == $${
         if reader ready; !{
           CompilerException ex line,tokenNum,"char expected"
         }
         ArrayList;char; b
         b add $'
         var firstChar reader readChar
         if firstChar == $\\; && reader ready{
          var c reader readChar
          if c == $t; || c == $n; || c == $f; || c == $b; || c == $r; || c == $\\; || c == $";|| c == $0{
             b add $\\
             b add c
          }if c == $s{
            b add $\s
          }{
           CompilerException ex line,tokenNum,"no special character called " concat c toString
          }
         }{
          b add firstChar
         }
         b add $'
         tokens add token line,tokenNum,b getArray; cast string
       }
      }{
       CompilerException ex line,tokenNum,"no tokens available"
       ex throw
      }
   }
   puts tokens getSize; toString
   return tokens get i
 }
 fn void close = reader close
 fn bool hasNext = reader ready; || tokens getSize; == i
}
use{
 std.io.base
 std.collection
 risa.fpl.base
 std.backend
}
enum TokenType NEW_LINE ID CHAR_LIT END_BLOCK BEGIN_BLOCK STRING
final class Token{
  private const{
   uint line;tokenNum
   String value
   TokenType type
  }
  this uint line uint tokenNum String value TokenType type{
    this line = line
    this tokenNum = tokenNum
    this value = value
    this type = type
  }
  fn uint getLine = line
  fn uint getTokenNum = tokenNum
  fn String getValue = value
  fn TokenType getType = type
  fn String toString = value
}
final class Tokenizer{
 private{
    uint line 1;tokenNum 1;i 0
    char c
    bool readNext true
    const{
       DataReader reader
       ArrayList;Token;tokens init
    }
    fn bool isSeparator = c isWhitespace; ||  c == ${; || c == $}; || c == $; #char ;
    fn void error String msg = CompilerException:throw line,tokenNum,msg
    fn void token String value TokenType type{
     tokens add Token:new line,tokenNum,value,type
     if type == TokenType:NEW_LINE{
       line ++
       tokenNum = 1
     }{
       tokenNum ++
     }
    }
    fn char read{
      if readNext{
       c = reader readChar
      }{
       readNext = true
      }
      return c
    }
    fn bool ready = reader ready; || readNext !
    fn void valueToken ArrayList;char;* b TokenType type{
      var p char:alloc[] b getSize
      memoryCopy b getArray;cast byte*,p cast byte*,b getSize
      token String:new p,b getSize;cast uint,true;,type
    }
    fn void prepare{
      if tokens getSize; == i{
         tokens clear
         i = 0
         while ready{
           read
           if c == $({
             while ready; && read; == $){}
           }if c == $#{
             while ready; && read; == $\n{}
           }if c == $${
            if ready; !{
              error "char expected"
             }
             ArrayList;char; b init
             b add $'
             var firstChar read
             if firstChar == $\\{
                if ready; !{
                   error "character expected"
                }
                if c == $t; || c == $n; || c == $f; || c == $b; || c == $r; || c == $\\; || c == $0{
                   b add $\\
                   b add c
                }if c == $s{
                   b add $\s
                }{
                 error "no special character called " + c toString
                }
               }if firstChar isWhitespace{
                   error "$ cannot be followed by whitespace"
                 }{
                  b add firstChar
                 }
              b add $'
              b add $\0
              valueToken b ref,TokenType:CHAR_LIT
             }if c == $\n{
                 token "\n",TokenType:NEW_LINE
                 break
             }if c == ${{
                 token "{",TokenType:BEGIN_BLOCK
             }if c == $}{
                 token "}",TokenType:END_BLOCK
              }if c == $"{
                  ArrayList;char;b init
                  b add $"
                  while ready; && read; != $"{
                     if c == $\n{
                      error "expected \""
                     }
                   if c == $\\{
                      b add $\\
                      if ready; !{
                         error "character expected"
                      }
                      read
                      }
                      b add c
                    }
              b add $"
              valueToken b ref,TokenType:STRING
             }if c isWhitespace;!{
                 ArrayList;char;b init
                 b add c
                 while ready{
                    read
                    if isSeparator{
                       readNext = false
                       break
                   }
                   b add c
               }
               valueToken b ref,TokenType:ID
              }
           }
        }
    }
 }
 this Readable readable = reader = DataReader:new readable
 fn Token next{
    var token peek
    i ++
    return token
 }
 fn Token peek{
   prepare
   if tokens isEmpty{
     error "no tokens available"
   }
   return tokens get i
 }
 fn void close = reader close
 fn bool hasNext{
  prepare
  return tokens isEmpty; !
 }
 fn Token nextID{
   var id next
   if id getType; != TokenType:ID{
     error "identifier expected instead of " + id getValue
   }
   return id
 }
}
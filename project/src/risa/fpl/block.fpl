use{
 std.io.file
 std.collection
 risa.fpl.base
 risa.fpl.tokenizer
 risa.fpl.object
 risa.fpl.env
 risa.fpl.main
}
class ModuleBlock ObjectInfo{
 private const{
   String name
   String cPath
 }
 this String fplPath{
   Tokenizer tokenizer init FileReader:new fplPath
   name = fplPath replace $/,$.;replace $\\,$.
   var endIndex 0
   var beginIndex 0
   var first false
   for i,name getLength{
     if beginIndex == 0; && name get i; == $.{
        if first{
         beginIndex = i + 2
        }{
         first = true
        }
     }
     if first && name get i; == $.{
       endIndex = i - 1
     }
   }
   name = name substring beginIndex,endIndex
   if getMainModule; == name{
     addField "main",MainBlock:new
   }
   cPath = name replace $.,$_; + ".c"
   try{
      while tokenizer hasNext{
          var token tokenizer next
          if token getType; == TokenType:ID{
            try{
              getField token getValue
            }catch NoElementException{
              CompilerException:throw token,"function " + token getValue;; + " not found"
            }
          }
      }
   }catch CompilerException{
     ex throw fplPath
   }
   tokenizer close
 }
}
final class MainBlock IFunction{
 override fn void compile int line int tokenNum ObjectInfo* env IRWriter* writer{

 }
}
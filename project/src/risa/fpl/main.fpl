use{
  std.io.file
  std.io.base
  std.collection
  std.system
  risa.fpl.tokenizer
  risa.fpl.base
  risa.fpl.block
}
private{
   const{
     String outputFile
     String mainModule
     ArrayList;String;flags init
   }
   fn String readValue Tokenizer* tokenizer{
      var value tokenizer next
      if value getType; != TokenType:STRING{
       CompilerException:new value getLine;,value getTokenNum;,"string literal expected";throw "build.bs"
      }
      print value getValue
      if tokenizer hasNext; && tokenizer next; getType; != TokenType:NEW_LINE{
        CompilerException:new value getLine;,value getTokenNum;,"end of line expected";throw "build.bs"
      }
      return value getValue
   }
   fn void compileDirectory String srcDir String directory{
     var fullPath srcDir + "/"; + directory
     DirectoryStream stream init fullPath
     while stream ready{
       var name stream read
       var path fullPath + name
       if isDirectory path{
        compileDirectory srcDir,path
       }if isFile path{
        ModuleBlock block init path
       }
     }
     stream close
   }
 }
 fn String getMainModule = mainModule
main{
 if argc != 2{
   stderr writeString "<project directory> expected"
   return 2 #1 is reserved for exceptions
 }
 try{
 (
    var project args get 1
    FileReader reader init project + "/build.bs"
    Tokenizer tokenizer init reader
    var noMainModule true;noOutputFile true
    String ccArgs
    while tokenizer hasNext{
      var id tokenizer nextID
      if tokenizer hasNext; !{
        CompilerException:new id getLine;,id getTokenNum;,"property value expected";throw "build.bs"
      }
      var idS id getValue
      if idS == "outputFile"{
        outputFile = readValue tokenizer ref
        noOutputFile = false
      }if idS == "mainModule"{
        mainModule = readValue tokenizer ref
        noMainModule = false
      }if idS == "flags"{
        while tokenizer hasNext{
          var flag tokenizer next
          if flag getType; == TokenType:ID{
            flags add flag getValue
          }if flag getType; == TokenType:NEW_LINE{
            break
          }{
           CompilerException:new flag getLine;,flag getTokenNum;,"flag expected instead of " + flag getValue;;;throw "build.bs"
          }
        }
      }{
        [ CompilerException:new id getLine;,id getTokenNum;,idS + " property doesn't exist"; ] throw "build.bs"
      }
    }
    tokenizer close
    if noMainModule{
      CompilerException:new "no main module";throw "build.bs"
    }
    if noOutputFile{
      CompilerException:new "no output file";throw "build.bs"
    }
    IRWriter writer init FileWriter:new outputFile substring 1,outputFile getLength; - 2#remove quotation marks
    writer close
    compileDirectory project + "/src";,""
    )
    FileReader reader init "test/build.bs"
    Tokenizer tokenizer init reader
    while tokenizer hasNext{
       tokenizer next;getValue;getLength
       print "x"
    }
    tokenizer close
 }catch CompilerException{
   stderr writeString ex getMessage
   return 3
 }
}
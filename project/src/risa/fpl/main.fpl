use{
  std.io.file
  std.io.base
  std.collection
  std.system
  risa.fpl.tokenizer
  risa.fpl.base
}
class FPL{
 private{
   const{
     String outputFile
     String mainModule
     ArrayList;String; flags
   }
   fn String readValue Tokenizer* tokenizer{
      var value tokenizer next
      if value getType; != TokenType:STRING{
       CompilerException ex value getLine;,value getTokenNum;,"String literal expected"
       ex setFile "build.bs"
       ex throw
      }
      if tokenizer hasNext; && tokenizer next; getType; != TokenType:NEW_LINE{
        CompilerException ex value getLine;,value getTokenNum;,"end of line expected"
        ex setFile "build.bs"
        ex throw
      }
      return value getValue
   }
   fn void compileDirectory String srcDir String directory{
     var fullPath srcDir + "/"; + directory
     DirectoryStream stream srcDir
     while stream ready{
       var name stream read
       var path fullPath + name
       var fplPath directory + "/"; + name
       if isDirectory path{
         compileDirectory srcDir,fplPath
       }if isFile path{
        ModuleBlock block this,srcDir,fplPath
       }
     }
     stream close
   }
 }
 this String project{
  FileReader reader project + "/build.bs"
  Tokenizer tokenizer reader
  var noMainModule true;noOutputFile true
  String ccArgs
  while tokenizer hasNext{
    var id tokenizer nextID
    if tokenizer hasNext; !{
      CompilerException ex id getLine;,id getTokenNum;,"property value expected"
      ex setFile "build.bs"
      ex throw
    }
    var idS id getValue
    if idS == "outputFile"{
      outputFile = readValue tokenizer ref
      noOutputFile = false
    }if idS == "mainModule"{
      mainModule = readValue tokenizer ref
      noMainModule = false
    }if idS == "flags"{
      while tokenizer hasNext{
        var flag tokenizer next
        if flag getType; == TokenType:ID{
          flags add flag getValue
        }if flag getType; == TokenType:NEW_LINE{
          break
        }{
         CompilerException ex flag getLine;,flag getTokenNum;,"flag expected instead of " + flag getValue
         ex setFile "build.bs"
         ex throw
        }
      }
    }{
      CompilerException ex id getLine;,id getTokenNum;,idS + " property doesn't exist"
      ex setFile "build.bs"
      ex throw
    }
  }
  tokenizer close
  if noMainModule{
    CompilerException ex 0,0,"no main module"
    ex setFile "build.bs"
    ex throw
  }
  if noOutputFile{
    CompilerException ex 0,0,"no output file"
    ex setFile "build.bs"
    ex throw
  }
  compileDirectory project + "/src";,""
 }
}
class ModuleBlock{
 this FPL* fpl String srcDir String fplPath{

 }
}
main{
 if argc != 2{
   stderr writeString "project directory expected"
   return 2 #1 is reserved for exceptions
 }
 try{
    FPL:new args get 1
 }catch CompilerException{
   stdout writeString ex getMessage
 }
}
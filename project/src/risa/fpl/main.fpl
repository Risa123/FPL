use{
  std.io.file
  std.io.base
  std.collection
  std.system
  risa.fpl.tokenizer
  risa.fpl.base
  risa.fpl.block
}
private{
   const{
     String outputFile
     String mainModule
     ArrayList;String;flags init
   }
   fn String readValue Tokenizer* tokenizer{
      var value tokenizer next
      if value getType; != TokenType:STRING{
       error value,"string literal expected"
      }
      if tokenizer hasNext; && tokenizer next; getType; != TokenType:NEW_LINE{
        error value,"end of line expected instead of " + value getValue
      }
      return value getValue;substring 1,value getValue;getLength; - 2
   }
   fn void error Token token String msg = CompilerException:new token,msg;throw "build.bs"
   fn void compileDirectory String srcDir String directory{
     var fullPath srcDir + "/"; + directory
     DirectoryStream stream init fullPath
     while stream ready{
       var name stream read
       var path fullPath + "/"; + name
       if isDirectory path{
        compileDirectory srcDir,path
       }if isFile path{
        ModuleBlock block init path
       }
     }
     stream close
   }
 }
fn String getMainModule = mainModule
main{
 if argc != 2{
   stderr write "<project directory> expected"
   return 2 #1 is reserved for exceptions
 }
 try{
    var project args get 1
    Tokenizer tokenizer init FileReader:new project + "/build.bs"
    var hasMainModule false;hasOutputFile false
    while tokenizer hasNext{
      var propertyToken tokenizer nextID
      var property propertyToken getValue
      if property == "mainModule"{
         mainModule = readValue tokenizer ref
         hasMainModule = true
      }if property == "outputFile"{
        outputFile = readValue tokenizer ref
        hasOutputFile = true
      }{
        error propertyToken,"no property named " + property
      }
    }
    tokenizer close
    if hasMainModule !{
      CompilerException:new "no main module";throw "build.bs"
    }
    if hasOutputFile !{
      CompilerException:new "no output file";throw "build.bs"
    }
    IRWriter writer init FileWriter:new outputFile
    compileDirectory project + "/src";,""
    writer close
 }catch CompilerException{
   stderr write ex getMessage
   return 3
 }
}
1 ÚVOD
Název jazyka je FPL (Function Processing Language). Dùvodem k tomuto názvu je, že byl pùvodnì myšlen jako dialekt Lispu.
Syntakticky se tedy kód stejnì jako u Lispuu dìlí na atomy a listy. Jedním z problémù Lispu je však velké množství závorek. 
Z tohoto dùvodu existují na druhy listù blokový a pøíkazový. Blokový je vymezen složenými závorkamy. Pøíkazový je ukonèen -
koncem øádku nebo koncem blokového listu. Napøíklad:
{ <pøíkazový list> }
{
  <pøíkazový list>
  <pøíkazový list>
}
Dùvodem proè se však nejdná o dialekt je, že jeden list nezamená jedna funkce a její arugmenty. Pøeklad listu je øešen tak - 
, že se vezme atom ten se intepretuje jako funkce, které si z listu vezme potøebné arugmenty a poté se cyklus opakuje.
2 KOMENTÁØE
Dìlí se na jednoøátkové zaèínající # a víceøádkové vymezené závorkami.
3 DRUHY ATOMÙ
3.1 IDENTIFIKÁTOR
Platným identifikátorem jsou jakély nebílé znaky kromì tìch, které jsou souèástí komentáøù blokù nebo literálù.
3.2 ØÌTÌZEC ZNAKÙ
Je vymezen úvozovkami.
3.3 ÈÍSLA
Celá èísla typového znaku se podle znaménka berou jako literály typu sint (se znaménkem) nebo uint (bez znaménka).
U celích èísel lze použít typové znaky S pro literál typu sshort nebo ushort. Znak B pro typy ubyte nebo sbyte. 
Poslední možností je L jako slong nebo ulong. Desetiná èísla jsou buï double nebo float s typovým znakem F.
3.4 BOOL
Literály jsou øešeny jako funkce true a false. (viz. 4.8)
3.5 SPECIÁNÍ ATOMY
Jsou jimi END_ARGS(zapsaný jako ;) a ARG_SEPARATOR(zapsaný jako ,).
3.6 ZNAKY
Ve stylu $a
4.1 VESTAVÌNÉ FUNKCE
4.2 FN
Slouží k deklaraci funkce.
Zápis je fn <datový typ pro vracení> <název funkce> <seznam paramtrù ve stylu <typ> <název>> <blok>
Poslední parametr lze vypusti pokud je aplikován modifikátor native který je popsán níže.
4.3 MODIFIKÁTORY
Modifikátory jsou funkce na svùj parametr, který je název další funkce nebo blok, aplikují modifikátor.
Existují dva modifikátory native a const. Const se používá pro deklaraci konstant. Native lze použít na deklaraci promìné nebo funkce.
V obou pøípadech bude C mezikódu použít modifikátor extern a nebude použit name mangling. Dále bude vynucen C modifikátor. V pøípadì funkce lze vypustit
poslední parametr a promìné mùže mít pouze delkaraci. 
4.4 USE
Používá se pro importování modulù(jeden zdrojový soubor). Existuje nìkolik možných zápisù use <názvy modulù formátu složka.soubor> -
nebo use { <názvy modulù>}. Poslední možností je
use {
 <názvy modulù>
 <názvy modulù>
}
4.5 HELLO WORLD
Nyní máme dostaèné znalosti na napsání tohoto tradièního programu.
use std.backend #importuje funkci puts

native fn void main {
  puts "Hello  World!"
}
4.6 RETURN
jak název napovídá slouží ke vracení hodnoty.
4.7 VAR
Var slouží k deklaraci promìné ve stylu var <název> <definice>. Lze deklarovat více promìných rùzných typù.
Napø.: var x 0,y 0
4.8 TRUE A FALSE
Vrací dané hodnoty jako datový typ bool.
4.9 VÌSTAVÌNÉ FUNKCE VYTVÁØENÉ PØEKLADAÈEM
4.9.1 <DATOVÝ TYP>
Slouží k delkaraci promìných ve stylu <datový typ> <název> <volitelná definice>. Ukazatel je souèástí delkarace typu.
Napøíklad: int* p 
Lze deklarovat více promìných napøíklad int x 0, int y 0
4.9.2 <PROMÌNÁ>
Zastupuje danou promìnou. Pokud nenásledují END_ARGS nebo ARG_SEPARATOR lze použít tvz. "metody promìných".
Tìmi jsou v =, který provede redefinici a & který vrací ukazatel.
4.9.3 <DEKLAROVANÁ FUNKCE>
Zastupuje deklarovanou funkci.  Parametry se odìlují ARG_SEPARATOR a mohou se ukonèit ARGS_END.
4.9.4 <TØÍDA>
Lze pouze deklarovat.
4.10 CLASS
Deklaruje tøídu. V souèasné dobì mùže obsahovat pouze attributy bez definicí.
4.11 IF
Pøedstavuje podmínku zápis je if <podmínka> <blok> <volitolnì else blok>
4.12 WHILE
Zápis while <podmínka> <blok>
4.13 []
Deklaruje statické pole. Parametry jsou <typ><délka><jméno>. Lze použít modifikátory native a const.
Pole zatím není samostantý typ.
5 DATOVÉ TYPY	
Všechny jsou objektové.
5.1 VOID
žádné metody
5.2 ÈÍSELNÉ TYPY
Jsou 
byte sbyte ubyte
short sshort ushort
int sint uint
long slong ulong
double 
float
Všechny mají metody ++,--,*,/,. Celoèíselné také %.
Metoda cast slouží k pøetypování na jiný èíselný typ
5.3 BOOL
Žádné metody.
5.4 STRING
žádné metody
5.5 UKAZATELE
Tento typ je dynamicky vytvoøen pøekladaèem. Lze použít aritmetické operátory. 
Metoda cast slouží k pøetypování na jiný typ ukazatele nebo na ulong (adresa ukazatele).
Method get <index> slouží k indexování.
5.6 CHAR
Používá se pro znaky v rozsahu 0-255
methoda asByte pøevede na typ ubyte
